Webserv – To‑Do List

Ordre recommandé (rapide -> long)
1) HTTP: ajouter Date, Server, Connection: close à toutes les réponses
2) Erreurs: fallback pages par défaut (www/error/CODE.html) si non configurées
3) Static: appliquer root/index par location avant la résolution du fichier
4) Static: index par défaut si le chemin est un dossier
5) Tests: 3 curl de base (200, 404, 405)
6) Réseau/IO: bind sur host de la conf
7) HTTP: Content-Length simple + 400 si incohérent
8) Config: client_max_body_size -> 413
9) Static: autoindex (listing) si activé
10) Config: return (301/302)
11) Méthodes: POST upload vers dossier configuré
12) Config: server_name + sélection via Host
13) HTTP: Transfer-Encoding: chunked (déchunking)
14) CGI: implémenter un CGI simple
15) Réseau/IO: envois partiels, EAGAIN, timeouts, stress tests

Exécution
- ✅ Fichier de configuration par défaut si aucun argument (ex: conf_file/default.conf)

Réseau / IO (non bloquant)
- ✅ Sockets non-bloquants + epoll unique
- [ ] Surveiller lecture/écriture simultanément par FD et gérer buffers d’envoi/réception
- [ ] Gérer envois partiels, EAGAIN, et timeouts par client pour éviter les hangs
- [ ] Respecter l’adresse d’écoute de la conf: bind sur host (pas seulement INADDR_ANY)
- [ ] Ne jamais read/write hors événements (audit + refactor si besoin)

HTTP Core
- ✅ Parsing des headers basique
- [ ] Parser robuste: ligne de requête + CRLF + normalisation
- [ ] Gestion Content-Length
- [ ] Transfer-Encoding: chunked (déchunking)
- [ ] Connexions persistantes: headers Connection, Date, Server
- ✅ Content-Type/MIME par extension (⚠️ a revoir)
- ✅ 405 si méthode invalide
- ✅ 400 si Host manquant en HTTP/1.1
- [ ] Sécuriser chemins (normalisation, anti path traversal)

Méthodes
- ✅ GET basique (fichiers statiques)
- ✅ DELETE (suppression de fichier)
- ✅ POST: body requis
- [ ] POST: upload de fichiers vers un dossier configuré
- [ ] PUT (si conservé) ou retirer si non requis par le sujet

Fichiers statiques / Dossiers
- [ ] Autoindex (listing) si activé
- [ ] Index par défaut dans les dossiers
- [ ] Appliquer root/index par location (pas seulement root global)

Gestion des erreurs
- [ ] Pages d’erreur par défaut si non fournies (fallback sur www/error/*.html)
- [ ] Codes: 404, 405, 413, 500 exacts et cohérents
- [ ] client_max_body_size -> 413

Configuration (.conf)
- ✅ Parsing du .conf basique
- [ ] server_name et sélection du bon serveur via l’en-tête Host
- [ ] client_max_body_size
- [ ] return (HTTP redirect 301/302)
- [ ] upload_store (ou équivalent)
- [ ] cgi_pass / mapping par extension (.php/.py)
- [ ] root/index/autoindex par location (déjà partiel), allowed_methods OK
- ✅ listen multi-ports

CGI
- [ ] Implémenter au moins un CGI (php-cgi ou python)
- [ ] fork/execve, pipes non bloquants, variables d’environnement CGI
- [ ] PATH_INFO, SCRIPT_FILENAME, QUERY_STRING, etc.
- [ ] Déchunker la requête avant CGI; lire jusqu’à EOF si pas de Content-Length renvoyé
- [ ] Lancer le CGI dans le bon répertoire (cwd)

Tests / Validation
- [ ] Tests curl/telnet/navigateur (200/301/302/400/403/404/405/413/500)
- [ ] Stress tests (wrk/ab) + vérif non-blocage
- [ ] Comparaison avec NGINX (entêtes et comportements)

Divers
- [ ] Compléter ou retirer srcs/utils/signal.cpp
- [ ] Logs simples (access/error) optionnels
